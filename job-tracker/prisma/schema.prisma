// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  password      String
  name          String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  // Subscription & Billing
  subscriptionTier    String   @default("free") // free, pro, pro_max, self_hosted
  subscriptionStatus  String   @default("active") // active, cancelled, expired, trial
  subscriptionExpiresAt DateTime?
  stripeCustomerId    String?
  stripeSubscriptionId String?

  // Self-Hosting Support
  apiKeyMode          String   @default("platform") // platform, self_hosted
  encryptedApiKey     String?  // User's own OpenAI key (encrypted)

  // Onboarding Progress
  onboardingCompleted Boolean  @default(false)
  onboardingStep      Int      @default(0) // Current step in onboarding (0 = not started, 5 = completed)
  profileCompleted    Boolean  @default(false)
  resumeUploaded      Boolean  @default(false)
  apiKeyConfigured    Boolean  @default(false)

  jobs          Job[]
  ratings       Rating[]
  resumes       Resume[]
  profile       UserProfile?
  preferences   UserPreferences?
  aiUsage       AIUsageTracking[]
  jobAnalysisCache JobAnalysisCache[]
  extractionQueue ExtractionQueue[]
  aiTasks       AITask[]

  @@index([email])
  @@index([subscriptionTier])
  @@index([apiKeyMode])
  @@index([onboardingCompleted])
}

model Job {
  id                String         @id @default(cuid())
  userId            String
  url               String?
  title             String
  company           String
  companyLogoUrl    String?        // URL to company logo image
  location          String?
  salary            String?
  salaryMin         Float?
  salaryMax         Float?
  salaryCurrency    String?        // Currency code (USD, EUR, etc.)
  salaryFrequency   String?        // annual/monthly/hourly
  contractType      String?
  
  // Enhanced Compensation Details
  bonusStructure    String?        // JSON: {type, percentage/amount, frequency}
  equityOffered     String?        // JSON: {type: RSU/options, amount, vestingPeriod}
  totalCompMin      Float?         // Total compensation min in USD
  totalCompMax      Float?         // Total compensation max in USD
  isNegotiable      Boolean        @default(true)
  remotePayAdjustment Boolean      @default(false)
  skills            String?
  description       String?
  requirements      String?
  perks             String?
  summary           String?        // AI-generated summary for quick preview
  workMode          String?        // remote/hybrid/onsite
  extractedData     String?        // JSON string for raw extracted data
  matchScore        Float?
  matchAnalysis     String?        // JSON string for detailed match analysis (strengths, missing elements)
  
  // Enhanced Application Tracking
  applicationStatus String         @default("not_applied")
  appliedAt         DateTime?
  applicationDeadline DateTime?
  postedDate        DateTime?      // When the job was originally posted by the company
  priority          String         @default("medium") // low/medium/high
  
  // Contact Information
  recruiterName     String?
  recruiterEmail    String?
  recruiterPhone    String?
  companyContact    String?
  
  // Interview & Progress Tracking
  phoneScreeningAt  DateTime?
  firstInterviewAt  DateTime?
  secondInterviewAt DateTime?
  finalInterviewAt  DateTime?
  offerReceivedAt   DateTime?
  
  // Additional Details
  notes             String?
  privateNotes      String?        // Private thoughts, salary expectations, etc.
  companyResearch   String?        // Research notes about the company
  preparationNotes  String?        // Interview prep notes
  followUpDate      DateTime?      // When to follow up next
  rejectionFeedback String?        // Feedback received if rejected
  
  // Metadata
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  extractedAt       DateTime       @default(now())
  
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  ratings           Rating[]
  activities        JobActivity[]
  analysisCache     JobAnalysisCache[]
  
  @@index([userId])
  @@index([company])
  @@index([workMode])
  @@index([matchScore])
  @@index([applicationStatus])
  @@index([priority])
}

model JobActivity {
  id          String         @id @default(cuid())
  jobId       String
  userId      String
  type        String         // applied, interview_scheduled, interview_completed, offer_received, etc.
  title       String
  description String?
  date        DateTime       @default(now())
  metadata    String?        // JSON for additional data
  
  job         Job            @relation(fields: [jobId], references: [id], onDelete: Cascade)
  
  @@index([jobId])
  @@index([userId])
  @@index([date])
}

model Rating {
  id            String         @id @default(cuid())
  userId        String
  jobId         String
  rating        Int           // 1-5 stars
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  job           Job            @relation(fields: [jobId], references: [id], onDelete: Cascade)
  
  @@unique([userId, jobId])
  @@index([userId])
  @@index([jobId])
}

model Resume {
  id            String         @id @default(cuid())
  userId        String
  fileName      String
  fileUrl       String
  content       String?        // Extracted text content
  skills        String?        // JSON array of skills
  experience    String?        // JSON array of experience
  education     String?        // JSON array of education
  embedding     String?        // JSON array for vector embedding
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([isActive])
}

model Session {
  id            String         @id @default(cuid())
  userId        String
  token         String         @unique
  expiresAt     DateTime
  createdAt     DateTime       @default(now())
  
  @@index([token])
  @@index([userId])
}

model UserProfile {
  id                String         @id @default(cuid())
  userId            String         @unique

  // Personal Context
  currentLocation   String?        // User's current city for remote jobs
  currentCountry    String?        // User's current country
  familySize        Int            @default(1)
  dependents        Int            @default(0)
  maritalStatus     String?        // single/married/partnered

  // Financial Expectations
  expectedSalaryMin Float?         // Minimum acceptable in USD
  expectedSalaryMax Float?         // Ideal salary in USD
  currentSalary     Float?         // Current salary for comparison
  preferredCurrency String         @default("USD")

  // Lifestyle Preferences
  housingPreference String?        // rent/buy/either
  commuteToleranceMinutes Int?     // Max minutes willing to commute
  openToRelocation  Boolean        @default(false)
  preferredCountries String?       // JSON array of preferred countries

  // Career Preferences
  yearsOfExperience Int?
  industryPreferences String?      // JSON array of preferred industries

  // Enhanced Profile Information for AI Negotiation
  additionalInfo    String?        // Additional context not in resume
  skills            String?        // JSON array of skills
  education         String?        // Education background
  linkedinUrl       String?        // LinkedIn profile URL for network analysis
  certifications    String?        // Professional certifications
  achievements      String?        // Key career achievements
  negotiationHistory String?       // Past negotiation experiences
  careerLevel       String?        // junior/mid/senior/lead/principal/executive
  industryExperience String?       // JSON array of industries worked in

  // Tax and Financial Information
  filingStatus      String?        // single/married_filing_jointly/married_filing_separately/head_of_household
  stateOfResidence  String?        // For accurate tax calculations

  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  preferences       UserPreferences?

  @@index([userId])
}

model UserPreferences {
  id                String         @id @default(cuid())
  userId            String         @unique
  userProfileId     String         @unique

  // AI Auto-Analysis Preferences
  autoAnalyzeAfterExtraction Boolean @default(false)  // Auto-run all analyses after job extraction
  autoMatchScore    Boolean        @default(true)     // Auto-calculate match score
  autoSalaryAnalysis Boolean       @default(false)    // Auto-run salary analysis
  autoCompanyResearch Boolean      @default(false)    // Auto-run company research
  autoSkillGapAnalysis Boolean     @default(false)    // Auto-run skill gap analysis
  autoInterviewPrep Boolean        @default(false)    // Auto-generate interview prep

  // UI Preferences
  theme             String         @default("minimal") // minimal, dark, colorful
  showAnimations    Boolean        @default(true)     // Show loading animations (cat mascot)
  compactView       Boolean        @default(false)    // Use compact view for cards
  showDetailedFeedback Boolean     @default(true)     // Show detailed match feedback

  // Notification Preferences
  emailNotifications Boolean       @default(false)    // Email notifications for job updates
  browserNotifications Boolean     @default(true)     // Browser notifications
  notifyOnExtraction Boolean       @default(true)     // Notify when extraction completes
  notifyOnAnalysis  Boolean        @default(true)     // Notify when AI analysis completes

  // Data Preferences
  cacheAnalysisResults Boolean     @default(true)     // Cache AI results for performance
  shareAnonymousData Boolean       @default(false)    // Share usage data for improvements

  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userProfile       UserProfile    @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model CityData {
  id                String         @id @default(cuid())
  city              String
  country           String
  state             String?

  // Cost indices (NYC = 100 baseline)
  costOfLivingIndex Float
  rentIndex         Float
  groceriesIndex    Float
  restaurantIndex   Float
  transportIndex    Float
  utilitiesIndex    Float

  // Quality of Life indices (0-100)
  qualityOfLifeIndex Float?
  safetyIndex       Float?
  healthcareIndex   Float?
  educationIndex    Float?
  trafficTimeIndex  Float?        // Average commute time
  pollutionIndex    Float?
  climateIndex      Float?

  // Salary Data
  avgNetSalaryUSD   Float?        // Average monthly net salary in USD
  medianHousePriceUSD Float?      // Median house price in USD

  // Tax Information
  incomeTaxRate     Float?        // Average income tax rate %
  salesTaxRate      Float?        // Sales tax rate %

  // Additional Metadata
  population        Int?
  lastUpdated       DateTime
  source            String         // numbeo/manual/api
  dataPoints        Int?           // Number of data contributions

  @@unique([city, country, state])
  @@index([city])
  @@index([country])
  @@index([lastUpdated])
}

model SalaryAnalysisCache {
  id                String         @id @default(cuid())
  jobId             String
  userId            String

  // Cache key components
  jobTitle          String
  company           String
  location          String?
  jobSalary         String?
  userProfileHash   String         // Hash of user profile data used

  // Analysis results (stored as JSON)
  analysisData      String         // Complete analysis JSON
  dataSources       String?        // Data sources used (JSON array)
  confidence        Float          // Overall confidence score

  // Metadata
  version           String         @default("1.0") // Schema version for migrations
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  expiresAt         DateTime       // Cache expiration
  lastAccessedAt    DateTime       @default(now())
  accessCount       Int            @default(1)

  @@unique([jobId, userId, userProfileHash])
  @@index([jobId])
  @@index([userId])
  @@index([expiresAt])
  @@index([lastAccessedAt])
}

model AIUsageTracking {
  id           String   @id @default(cuid())
  userId       String
  taskType     String   // job_analysis, resume_optimization, etc.
  monthKey     String   // YYYY-MM format for monthly tracking
  requestCount Int      @default(0)
  tokensUsed   Int      @default(0)
  lastUsedAt   DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, taskType, monthKey])
  @@index([userId])
  @@index([taskType])
  @@index([monthKey])
}

model AIResponseCache {
  id        String   @id @default(cuid())
  cacheKey  String   @unique
  response  String   // JSON response from AI
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([cacheKey])
  @@index([expiresAt])
}

model JobAnalysisCache {
  id           String   @id @default(cuid())
  jobId        String
  userId       String
  analysisType String   // job_analysis, requirements_analysis, etc.
  analysisData String   // JSON analysis results
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  job  Job  @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@unique([jobId, userId, analysisType])
  @@index([jobId])
  @@index([userId])
  @@index([analysisType])
  @@index([expiresAt])
}


enum ExtractionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  RETRY
}

model ExtractionQueue {
  id           String           @id @default(cuid())
  userId       String
  url          String
  status       ExtractionStatus @default(PENDING)
  progress     Int              @default(0)
  currentStep  String?
  result       Json?
  error        String?
  retryCount   Int              @default(0)
  maxRetries   Int              @default(3)
  priority     Int              @default(0)
  startedAt    DateTime?
  completedAt  DateTime?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([priority, status])
}

enum AITaskType {
  JOB_EXTRACTION
  SALARY_ANALYSIS
  LOCATION_ANALYSIS
  APPLICATION_STRATEGY
  RESUME_OPTIMIZATION
  MATCH_CALCULATION
  INTERVIEW_ANALYSIS
  NETWORK_ANALYSIS
  INSIDER_INTELLIGENCE
  TIMELINE_ANALYSIS
  COMPANY_INTELLIGENCE
  CULTURE_ANALYSIS
  COMPETITIVE_ANALYSIS
  INTERVIEW_PIPELINE
  INTERVIEW_COACHING
  SMART_QUESTIONS
  OUTREACH_GENERATION
  COMMUNICATION_GENERATION
}

enum AITaskStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CACHED
}

model AITask {
  id                String        @id @default(cuid())
  userId            String
  type              AITaskType
  status            AITaskStatus  @default(PENDING)

  // Job context
  jobId             String?
  jobTitle          String?
  company           String?

  // Progress
  progress          Int           @default(0)
  currentStep       String?

  // Timing
  startedAt         DateTime?
  completedAt       DateTime?
  estimatedDuration Int?          // milliseconds

  // Results
  error             String?
  resultData        String?       // JSON

  // Navigation
  navigationPath    String
  navigationTab     String?

  // Metadata
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@index([userId, createdAt])
  @@index([jobId])
  @@index([status, updatedAt])
}
